# Copyright 2025 Praveen Rachamreddy
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Coding Agent - Specialized for executing code."""

import sys
import os

# Add the parent directory to the path so we can import base_agent
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from google.adk.agents import LlmAgent
from google.adk.code_executors import BuiltInCodeExecutor

# Import the base agent
from agents.base_agent import BaseAgent


class CodingAgent(BaseAgent):
    """Agent specialized in executing code.
    
    This agent is designed to handle programming tasks, mathematical calculations,
    and logical operations. It uses the BuiltInCodeExecutor to safely execute code
    snippets generated by the language model.
    """

    def __init__(self):
        """Initialize the coding agent with its specific name and description."""
        super().__init__(
            name="CodingAgent",
            description="A coding specialist. Use this for math, logic, or coding tasks."
        )

    def create_agent(self) -> LlmAgent:
        """Create and return the configured coding agent.
        
        This method creates an LlmAgent with a code executor for handling
        programming and mathematical tasks.
        
        Returns:
            LlmAgent: Configured agent for handling coding tasks
        """
        return LlmAgent(
            model=self.get_default_model(),
            name=self.name,
            instruction=self.get_system_prompt(),
            code_executor=BuiltInCodeExecutor(),
        )


# Create an instance of the coding agent
coding_agent = CodingAgent()